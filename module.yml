---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'cfn-modules: AWS DynamoDB table'
# cfn-modules:implements(ExposeArn, ExposeName, LambdaDependency)
# TODO add backup mechanism (and remove limitation)
Parameters:
  AlertingModule:
    Description: 'Optional but recommended stack name of alerting module.'
    Type: String
    Default: ''
  TableName:
    Description: 'Optional name of the table (auto generated if not set).'
    Type: String
    Default: ''
  PartitionKeyName:
    Description: 'Name of the partition key.'
    Type: String
    Default: id
  PartitionKeyType:
    Description: 'Type of the partition key.'
    Type: String
    Default: S
    AllowedValues: [S, N, B]
  SortKeyName:
    Description: 'Optional name of the sort key.'
    Type: String
    Default: ''
  SortKeyType:
    Description: 'Type of the sort key (if SortKeyName is set).'
    Type: String
    Default: N
    AllowedValues: [S, N, B]
  MaxWriteCapacityUnits:
    Description: 'Maximum write capacity units used during auto scaling.'
    Type: Number
    Default: 1
  MinWriteCapacityUnits:
    Description: 'Minimum write capacity units used during auto scaling.'
    Type: Number
    Default: 1
  WriteCapacityUnitsUtilizationTarget:
    Description: 'Target write capacity utilization (in percent) that auto scaling tries to achieve (if you have spiky writes, a lower number is better).'
    Type: Number
    Default: 80
  MaxReadCapacityUnits:
    Description: 'Maximum read capacity units used during auto scaling.'
    Type: Number
    Default: 1
  MinReadCapacityUnits:
    Description: 'Minimum read capacity units used during auto scaling.'
    Type: Number
    Default: 1
  ReadCapacityUnitsUtilizationTarget:
    Description: 'Target read capacity utilization (in percent) that auto scaling tries to achieve (if you have spiky reads, a lower number is better).'
    Type: Number
    Default: 80
  Encryption: # TODO DynamoDB does not support customer managed CMKs. How should we handle this? Remove encryption?
    Description: 'Enable server side encryption using KMS (AWS managed) CMK.'
    Type: String
    Default: false
    AllowedValues: [aws, false]
Conditions:
  HasAlertingModule: !Not [!Equals [!Ref AlertingModule, '']]
  HasSortKey: !Not [!Equals [!Ref SortKeyName, '']]
  HasTableName: !Not [!Equals [!Ref TableName, '']]
  HasAwsManagedEncryption: !Equals [!Ref Encryption, aws]
Resources:
  Table:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !If [HasTableName, !Ref TableName, !Ref 'AWS::NoValue']
      AttributeDefinitions: !If
      - HasSortKey
      - - AttributeName: !Ref PartitionKeyName
          AttributeType: !Ref PartitionKeyType
        - AttributeName: !Ref SortKeyName
          AttributeType: !Ref SortKeyType
      - - AttributeName: !Ref PartitionKeyName
          AttributeType: !Ref PartitionKeyType
      KeySchema: !If
      - HasSortKey
      - - AttributeName: !Ref PartitionKeyName
          KeyType: HASH
        - AttributeName: !Ref SortKeyName
          KeyType: RANGE
      - - AttributeName: !Ref PartitionKeyName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref MinReadCapacityUnits
        WriteCapacityUnits: !Ref MinWriteCapacityUnits
      SSESpecification:
        SSEEnabled: !If [HasAwsManagedEncryption, true, false]
  RoleScaling:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: scaling
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'dynamodb:DescribeTable'
            - 'dynamodb:UpdateTable'
            - 'cloudwatch:PutMetricAlarm'
            - 'cloudwatch:DescribeAlarms'
            - 'cloudwatch:GetMetricStatistics'
            - 'cloudwatch:SetAlarmState'
            - 'cloudwatch:DeleteAlarms'
            Resource: '*'
  WriteScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxWriteCapacityUnits
      MinCapacity: !Ref MinWriteCapacityUnits
      ResourceId: !Sub 'table/${Table}'
      RoleARN: !GetAtt 'RoleScaling.Arn'
      ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
      ServiceNamespace: dynamodb
  ReadScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxReadCapacityUnits
      MinCapacity: !Ref MinReadCapacityUnits
      ResourceId: !Sub 'table/${Table}'
      RoleARN: !GetAtt 'RoleScaling.Arn'
      ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
      ServiceNamespace: dynamodb
  WriteScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${Table}-WriteScalingPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref WriteCapacityUnitsUtilizationTarget
        ScaleInCooldown: 600
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  ReadScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${Table}-ReadScalingPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref ReadCapacityUnitsUtilizationTarget
        ScaleInCooldown: 600
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  ReadThrottleEventsAlarm:
    Condition: HasAlertingModule
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Reads are throttled. Lower ReadCapacityUnitsUtilizationTarget or increase MaxReadCapacityUnits.'
      Namespace: 'AWS/DynamoDB'
      MetricName: ReadThrottleEvents
      Dimensions:
      - Name: TableName
        Value: !Ref Table
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
      OKActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
  WriteThrottleEventsAlarm:
    Condition: HasAlertingModule
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Writes are throttled. Lower WriteCapacityUnitsUtilizationTarget or increase MaxWriteCapacityUnits.'
      Namespace: 'AWS/DynamoDB'
      MetricName: WriteThrottleEvents
      Dimensions:
      - Name: TableName
        Value: !Ref Table
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
      OKActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
  ThrottledRequestsEventsAlarm:
    Condition: HasAlertingModule
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Batch requests are throttled. Lower {Read/Write}CapacityUnitsUtilizationTarget or increase Max{Read/Write}CapacityUnits.'
      Namespace: 'AWS/DynamoDB'
      MetricName: ThrottledRequests
      Dimensions:
      - Name: TableName
        Value: !Ref Table
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
      OKActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
  UserErrorsAlarm:
    Condition: HasAlertingModule
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'User errors'
      Namespace: 'AWS/DynamoDB'
      MetricName: UserErrors
      Dimensions:
      - Name: TableName
        Value: !Ref Table
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
      OKActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
  SystemErrorsAlarm:
    Condition: HasAlertingModule
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'System errors'
      Namespace: 'AWS/DynamoDB'
      MetricName: SystemErrors
      Dimensions:
      - Name: TableName
        Value: !Ref Table
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
      OKActions:
      - 'Fn::ImportValue': !Sub '${AlertingModule}-Arn'
Outputs:
  ModuleId:
    Value: 'dynamodb-table'
  ModuleVersion:
    Value: '0.0.5'
  StackName:
    Value: !Ref 'AWS::StackName'
  Arn:
    Value: !GetAtt Table.Arn
    Export:
      Name: !Sub '${AWS::StackName}-Arn'
  IamActions:
    Value: 'dynamodb:Batch*Item,dynamodb:DeleteItem,dynamodb:GetItem,dynamodb:PutItem'
    Export:
      Name: !Sub '${AWS::StackName}-IamActions'
  IamResources:
    Value: !GetAtt Table.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IamResources'
  Name:
    Value: !Ref Table
    Export:
      Name: !Sub '${AWS::StackName}-Name'
